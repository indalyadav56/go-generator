{{define "auth_controller"}}

package controllers

import (
	"{{.ServiceName}}/pkg/logger"
	"{{.ServiceName}}/pkg/utils/response"
	"github.com/gofiber/fiber/v2"
	"{{.ServiceName}}/internal/{{.AppName}}/services"
	"{{.ServiceName}}/internal/auth/dto"
)

type AuthController interface {
	Login(ctx *fiber.Ctx) error
	Register(ctx *fiber.Ctx) error
	Logout(ctx *fiber.Ctx) error
}

type authController struct {
	log logger.Logger 
	authSrv services.{{.IAppName}}Service
}

func NewAuthController(log logger.Logger, srv services.{{.IAppName}}Service) *authController {
	return &authController{
		authSrv: srv,
		log: log,
	}
}

// Register godoc
// @Summary Register a new user
// @Description Register a new user with the provided details
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /auth/register [post]
func (c *authController) Register(ctx *fiber.Ctx) error {
	req := new(dto.RegisterRequest)
	if err := ctx.BodyParser(req); err != nil {
		resp := response.Error("data parser error:-", err)
		return ctx.Status(resp.Status).JSON(resp)
	}
	
	respData, err := c.authSrv.Register(req)
	if err != nil {
		resp := response.Error("register", err)
		return ctx.Status(resp.Status).JSON(resp)
	}
	
	resp := response.Created("register", respData)
	return ctx.Status(resp.Status).JSON(resp)
}

// Login godoc
// @Summary Login a user
// @Description Authenticate a user and return a JWT token
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /auth/login [post]
func (c *authController) Login(ctx *fiber.Ctx) error {
	req := new(dto.LoginRequest)

	if err := ctx.BodyParser(req); err != nil {
		return err
	}

	respData, err := c.authSrv.Login(req)
	if err != nil {
		return err
	}
	return ctx.JSON(respData)
}

// RefreshToken godoc
// @Summary Refresh the JWT token
// @Description Refresh the JWT token using a valid refresh token
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /auth/refresh [post]
func (c *authController) RefreshToken(ctx *fiber.Ctx) error {
	return nil
}

// Logout godoc
// @Summary Logout a user
// @Description Invalidate the refresh token to log the user out
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /auth/logout [post]
func (c *authController) Logout(ctx *fiber.Ctx) error {
	// Method implementation
	return nil
}

// RequestPasswordReset godoc
// @Summary Request password reset
// @Description Send a password reset email to the user
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /auth/password-reset/request [post]
func (c *authController) RequestPasswordReset(ctx *fiber.Ctx) error {
	// Method implementation
	return nil
}

// ResetPassword godoc
// @Summary Reset password
// @Description Reset the user's password using a valid reset token
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /auth/password-reset/confirm [post]
func (c *authController) ResetPassword(ctx *fiber.Ctx) error {
	return nil
}

{{end}}