{{define "db_logger"}}
package database

import (
	"context"
	"time"

	appLogger "{{.ServiceName}}/pkg/logger"

	"gorm.io/gorm/logger"
)

type CustomGormLogger struct {
	LogLevel logger.LogLevel
	Logger   appLogger.Logger
}

// LogMode sets the logging level for GORM logs.
func (l *CustomGormLogger) LogMode(level logger.LogLevel) logger.Interface {
	l.LogLevel = level
	return l
}

// Info logs informational messages using your custom logger.
func (l *CustomGormLogger) Info(ctx context.Context, msg string, data ...interface{}) {
	if l.LogLevel >= logger.Info {
		l.Logger.Info(msg, data...)
	}
}

// Warn logs warning messages using your custom logger.
func (l *CustomGormLogger) Warn(ctx context.Context, msg string, data ...interface{}) {
	if l.LogLevel >= logger.Warn {
		l.Logger.Warn(msg, data...)
	}
}

// Error logs error messages using your custom logger.
func (l *CustomGormLogger) Error(ctx context.Context, msg string, data ...interface{}) {
	if l.LogLevel >= logger.Error {
		l.Logger.Error(msg, data...)
	}
}

// Trace logs the execution time and SQL query using your custom logger.
func (l *CustomGormLogger) Trace(ctx context.Context, begin time.Time, fc func() (sql string, rowsAffected int64), err error) {
	elapsed := time.Since(begin)
	sql, rows := fc()

	fields := []interface{}{
		"sql", sql,
		"rows", rows,
		"elapsed", elapsed,
	}

	// Log the error if any occurred
	if err != nil && l.LogLevel >= logger.Error {
		l.Logger.Error("Database error", append(fields, "error", err)...)
		return
	}

	// Log a warning if the query took too long (e.g., > 200ms)
	if elapsed > 200*time.Millisecond && l.LogLevel >= logger.Warn {
		l.Logger.Warn("Slow query", fields...)
		return
	}

	// Log info for normal queries
	if l.LogLevel >= logger.Info {
		l.Logger.Info("Executed query", fields...)
	}
}
{{end}}