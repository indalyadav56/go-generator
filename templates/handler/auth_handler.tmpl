{{define "auth_handler"}}
package handlers

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"{{.ServiceName}}/internal/{{.AppName}}/services"
	"{{.ServiceName}}/internal/{{.AppName}}/dto"
)

type {{.IAppName}}Handler interface {
	Register(c *gin.Context)
	Login(c *gin.Context)
	RefreshToken(c *gin.Context)
}

type {{.AppName}}Handler struct {
	service services.{{.IAppName}}Service
}

func New{{.IAppName}}Handler(service services.{{.IAppName}}Service) {{.IAppName}}Handler {
	return &{{.AppName}}Handler{
		service: service,
	}
}

func (h *{{.AppName}}Handler) Register(c *gin.Context) {
	var req dto.RegisterRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, err.Error())
		return
	}
	resp, err := h.service.Register(c.Request.Context(), &req)
	if err != nil {
		c.JSON(http.StatusBadRequest, err.Error())
		return
	}
	c.JSON(http.StatusOK, resp)
}

func (h *{{.AppName}}Handler) Login(c *gin.Context) {
	var req dto.LoginRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, err.Error())
		return
	}
	resp, err := h.service.Login(c.Request.Context(), &req)
	if err != nil {
		c.JSON(http.StatusBadRequest, err.Error())
		return
	}
	c.JSON(http.StatusOK, resp)
}

func (h *{{.AppName}}Handler) RefreshToken(c *gin.Context) {
	var req dto.RefreshTokenRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, err.Error())
		return
	}
	resp, err := h.service.RefreshToken(c.Request.Context(), &req)
	if err != nil {
		c.JSON(http.StatusBadRequest, err.Error())
		return
	}
	c.JSON(http.StatusOK, resp)
}
{{end}}
