{{define "handler"}}
package handlers

import (
	"github.com/gin-gonic/gin"
	"{{.ServiceName}}/internal/{{.AppName}}/services"
	"common/pkg/logger"
	"common/pkg/validator"
)

type {{.IAppName}}Handler interface {
	Create(c *gin.Context)
	Get(c *gin.Context)
	Update(c *gin.Context)
	Delete(c *gin.Context)

	{{if eq .AppName "user"}}
	GetCurrentUser(ctx *gin.Context)
	{{end}}
}

type {{.AppName}}Handler struct {
	service services.{{.IAppName}}Service
	log       logger.Logger
	validator validator.Validator
}

func New{{.IAppName}}Handler(service services.{{.IAppName}}Service, log logger.Logger, validator validator.Validator) {{.IAppName}}Handler {
	return &{{.AppName}}Handler{
		service: service,
		log:       log,
		validator: validator,
	}
}

// @Summary Create a new {{.AppName}}
// @Description Create a new {{.AppName}} entry
// @Tags {{.AppName}}
// @Accept json
// @Produce json
// @Router /v1/{{.AppName}}s [post]
func (h *{{.AppName}}Handler) Create(c *gin.Context) {
	// Implementation for Create
}

// @Summary Get {{.AppName}} details
// @Description Get details of a {{.AppName}} entry
// @Tags {{.AppName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.AppName}} ID"
// @Router /v1/{{.AppName}}s/{id} [get]
func (h *{{.AppName}}Handler) Get(c *gin.Context) {
	// Implementation for Get
}

// @Summary Update {{.AppName}} details
// @Description Update details of an existing {{.AppName}} entry
// @Tags {{.AppName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.AppName}} ID"
// @Router /v1/{{.AppName}}s/{id} [patch]
func (h *{{.AppName}}Handler) Update(c *gin.Context) {
	// Implementation for Update
}

// @Summary Delete {{.AppName}}
// @Description Delete an existing {{.AppName}} entry
// @Tags {{.AppName}}
// @Accept json
// @Produce json
// @Router /v1/{{.AppName}}s/{id} [delete]
func (h *{{.AppName}}Handler) Delete(c *gin.Context) {
	// Implementation for Delete
}



{{if eq .AppName "user"}}
// GetCurrentUser godoc
// @Summary Get the current authenticated user
// @Description Return details of the currently authenticated user
// @Tags Auth
// @Accept  json
// @Produce  json
// @Router /v1/users/me [get]
func (h *userHandler) GetCurrentUser(ctx *gin.Context) {
	userId, ok := ctx.Get("user_id")
	if !ok {
		return
	}

	data, err := h.service.GetByID(userId.(string))
	if err != nil {
		return
	}

	ctx.JSON(200, data)
}
{{end}}

{{end}}
