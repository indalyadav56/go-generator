{{define "app"}}
package app

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.ServiceName}}/config"
	"{{.ServiceName}}/common/logger"
	"{{.ServiceName}}/common/database"
	"{{.ServiceName}}/common/jwt"
)

type App struct {
	config *config.Config
	deps   *Dependencies
	server *http.Server
}

func NewApp(cfg *config.Config) (*App, error) {
	// Initialize dependencies
	deps, err := NewDependencies(cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize dependencies: %w", err)
	}

	// Initialize HTTP server
	server := &http.Server{
		Addr:         cfg.ServerAddr,
		ReadTimeout:  time.Second * 5,
		WriteTimeout: time.Second * 10,
		IdleTimeout:  time.Second * 60,
	}

	return &App{
		config: cfg,
		deps:   deps,
		server: server,
	}, nil
}

func (a *App) Run() error {
	// Set up routes
	router := NewRouter(a.deps)

	// Set server handler
	a.server.Handler = router

	// Channel to listen for errors coming from the listener.
	serverErrors := make(chan error, 1)

	// Start the service listening for requests.
	go func() {
		log.Printf("API listening on %s", a.server.Addr)
		serverErrors <- a.server.ListenAndServe()
	}()

	// Channel to listen for an interrupt or terminate signal from the OS.
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, os.Interrupt, syscall.SIGTERM)

	// Blocking select waiting for either a server error or a signal.
	select {
	case err := <-serverErrors:
		return fmt.Errorf("server error: %w", err)

	case sig := <-shutdown:
		log.Printf("shutdown started, signal: %v", sig)
		defer log.Printf("shutdown complete, signal: %v", sig)

		// Give outstanding requests a deadline for completion.
		ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
		defer cancel()

		// Asking listener to shut down and shed load.
		if err := a.server.Shutdown(ctx); err != nil {
			a.server.Close()
			return fmt.Errorf("could not stop server gracefully: %w", err)
		}
	}

	return nil
}

func (a *App) Close() error {
	return a.deps.Close()
}
{{end}}
