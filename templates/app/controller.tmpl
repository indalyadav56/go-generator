package controllers

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/indalyadav56/{{.ProjectName}}/internal/{{.Name}}/dto"
	"github.com/indalyadav56/{{.ProjectName}}/internal/{{.Name}}/services"
	"github.com/indalyadav56/{{.ProjectName}}/pkg/utils/response"
)

type {{.Name}}Controller struct {
	service services.{{.Name}}Service
}

func New{{.Name}}Controller(service services.{{.Name}}Service) *{{.Name}}Controller {
	return &{{.Name}}Controller{
		service: service,
	}
}

// Create{{.Name}} godoc
// @Summary Create a new {{.Name}}
// @Description Create a new {{.Name}} with the provided data
// @Tags {{.Name}}
// @Accept json
// @Produce json
// @Param data body dto.Create{{.Name}}DTO true "{{.Name}} data"
// @Success 201 {object} response.Response
// @Router /{{.Name}} [post]
func (c *{{.Name}}Controller) Create(ctx *gin.Context) {
	var req dto.Create{{.Name}}DTO
	if err := ctx.ShouldBindJSON(&req); err != nil {
		response.Error(ctx, http.StatusBadRequest, err.Error())
		return
	}

	if err := c.service.Create(ctx.Request.Context(), &req); err != nil {
		response.Error(ctx, http.StatusInternalServerError, err.Error())
		return
	}

	response.Success(ctx, http.StatusCreated, "{{.Name}} created successfully", nil)
}

// Update{{.Name}} godoc
// @Summary Update a {{.Name}}
// @Description Update a {{.Name}} with the provided data
// @Tags {{.Name}}
// @Accept json
// @Produce json
// @Param id path string true "{{.Name}} ID"
// @Param data body dto.Update{{.Name}}DTO true "{{.Name}} data"
// @Success 200 {object} response.Response
// @Router /{{.Name}}/{id} [put]
func (c *{{.Name}}Controller) Update(ctx *gin.Context) {
	id := ctx.Param("id")
	var req dto.Update{{.Name}}DTO
	if err := ctx.ShouldBindJSON(&req); err != nil {
		response.Error(ctx, http.StatusBadRequest, err.Error())
		return
	}

	if err := c.service.Update(ctx.Request.Context(), id, &req); err != nil {
		response.Error(ctx, http.StatusInternalServerError, err.Error())
		return
	}

	response.Success(ctx, http.StatusOK, "{{.Name}} updated successfully", nil)
}

// Delete{{.Name}} godoc
// @Summary Delete a {{.Name}}
// @Description Delete a {{.Name}} by ID
// @Tags {{.Name}}
// @Accept json
// @Produce json
// @Param id path string true "{{.Name}} ID"
// @Success 200 {object} response.Response
// @Router /{{.Name}}/{id} [delete]
func (c *{{.Name}}Controller) Delete(ctx *gin.Context) {
	id := ctx.Param("id")

	if err := c.service.Delete(ctx.Request.Context(), id); err != nil {
		response.Error(ctx, http.StatusInternalServerError, err.Error())
		return
	}

	response.Success(ctx, http.StatusOK, "{{.Name}} deleted successfully", nil)
}

// Get{{.Name}} godoc
// @Summary Get a {{.Name}}
// @Description Get a {{.Name}} by ID
// @Tags {{.Name}}
// @Accept json
// @Produce json
// @Param id path string true "{{.Name}} ID"
// @Success 200 {object} response.Response{data=dto.{{.Name}}DTO}
// @Router /{{.Name}}/{id} [get]
func (c *{{.Name}}Controller) GetByID(ctx *gin.Context) {
	id := ctx.Param("id")

	result, err := c.service.GetByID(ctx.Request.Context(), id)
	if err != nil {
		response.Error(ctx, http.StatusInternalServerError, err.Error())
		return
	}

	response.Success(ctx, http.StatusOK, "{{.Name}} retrieved successfully", result)
}

// List{{.Name}}s godoc
// @Summary List all {{.Name}}s
// @Description Get a list of all {{.Name}}s
// @Tags {{.Name}}
// @Accept json
// @Produce json
// @Success 200 {object} response.Response{data=[]dto.{{.Name}}DTO}
// @Router /{{.Name}} [get]
func (c *{{.Name}}Controller) List(ctx *gin.Context) {
	result, err := c.service.List(ctx.Request.Context())
	if err != nil {
		response.Error(ctx, http.StatusInternalServerError, err.Error())
		return
	}

	response.Success(ctx, http.StatusOK, "{{.Name}}s retrieved successfully", result)
}
