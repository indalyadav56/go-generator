package repository

import (
	"context"

	"github.com/indalyadav56/{{.ProjectName}}/internal/{{.Name}}/dto"
	"gorm.io/gorm"
)

type {{.Name}}Repository interface {
	Create(ctx context.Context, dto *dto.Create{{.Name}}DTO) error
	Update(ctx context.Context, id string, dto *dto.Update{{.Name}}DTO) error
	Delete(ctx context.Context, id string) error
	GetByID(ctx context.Context, id string) (*dto.{{.Name}}DTO, error)
	List(ctx context.Context) ([]*dto.{{.Name}}DTO, error)
}

type {{.Name}}RepositoryImpl struct {
	db *gorm.DB
}

func New{{.Name}}Repository(db *gorm.DB) {{.Name}}Repository {
	return &{{.Name}}RepositoryImpl{db: db}
}

func (r *{{.Name}}RepositoryImpl) Create(ctx context.Context, dto *dto.Create{{.Name}}DTO) error {
	// Implement create logic
	return nil
}

func (r *{{.Name}}RepositoryImpl) Update(ctx context.Context, id string, dto *dto.Update{{.Name}}DTO) error {
	// Implement update logic
	return nil
}

func (r *{{.Name}}RepositoryImpl) Delete(ctx context.Context, id string) error {
	// Implement delete logic
	return nil
}

func (r *{{.Name}}RepositoryImpl) GetByID(ctx context.Context, id string) (*dto.{{.Name}}DTO, error) {
	// Implement get by ID logic
	return nil, nil
}

func (r *{{.Name}}RepositoryImpl) List(ctx context.Context) ([]*dto.{{.Name}}DTO, error) {
	// Implement list logic
	return nil, nil
}
