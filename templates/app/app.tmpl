{{define "app"}}
package app

import (
	"{{.ServiceName}}/config"
	"fmt"
	"common/pkg/server"
	"context"
	_ "{{.ServiceName}}/docs"

	{{if (index .InitialApps "user")}}
	userRoutes "{{.ServiceName}}/internal/user/routes"
	{{end}}
	{{if (index .InitialApps "auth")}}
	authRoutes "{{.ServiceName}}/internal/auth/routes"
	authServices "{{.ServiceName}}/internal/auth/services"
	{{end}}
	
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

type App struct {
	config *config.Config
	deps   *Dependencies
}

func New() (*App, error) {
	cfg, err := config.New()
	if err != nil {
		return nil, fmt.Errorf("failed to load config: %w", err)
	}

	app := &App{
		config: cfg,
		deps: &Dependencies{
			Config: cfg,
		},
	}

	// Initialize all dependencies
	if err := app.initDependencies(); err != nil {
		return nil, err
	}

	return app, nil
}

func (a *App) Run() error {
	if err := a.deps.Server.Start(context.Background()); err != nil {
		return fmt.Errorf("failed to start server: %w", err)
	}
	return nil
}

func (a *App) initDependencies() error {
	var err error
	if a.deps.Server, err = server.New(); err != nil {
		return fmt.Errorf("failed to start server: %w", err)
	}

	{{if eq .Frontend "htmx"}}
	// // Serve static files
	// a.deps.Server.Router.Static("/static", "./static")
	// 
	// // Load HTML templates
	// a.deps.Server.Router.LoadHTMLGlob("templates/*.html")
	{{end}}



	a.initRepositories()

	a.initServices()

	a.initHandlers()

	return nil
}

func (a *App) initRepositories() {}

func (a *App) initServices() {
	{{if (index .InitialApps "auth")}}
	a.deps.AuthService = authServices.NewAuthService(a.deps.Logger, a.deps.JWT, {{if (index .InitialApps "user")}}a.deps.UserService{{else}}nil{{end}})
	{{end}}

}

func (a *App) initHandlers() {
	{{if (index .InitialApps "user")}}
	userRoutes.UserRoutes(a.deps.Server.Router(), nil)
	{{end}}
	{{if (index .InitialApps "auth")}}
	authRoutes.AuthRoutes(a.deps.Server.Router(), nil)
	{{end}}

	a.deps.Server.Router().GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	{{if eq .Frontend "react"}}
	// Serve frontend static files
	router.Static("/assets", "./frontend/dist/assets")
	router.StaticFile("/favicon.ico", "./frontend/dist/favicon.ico")

	// Handle frontend routes
	router.NoRoute(func(c *gin.Context) {
		// Serve the React index.html for all other routes
		c.File("./frontend/dist/index.html")
	})
	{{end}}

}

func (a *App) registerRoutes() {}

func (a *App) Shutdown() error {
	// if err := a.deps.DB.Close(); err != nil {
	// 	a.deps.Logger.Error("failed to close database connection", zap.Error(err))
	// }
	return nil
}
{{end}}