{{define "auth_service"}}
package services

import (
	"context"
	"common/pkg/logger"
	"common/pkg/jwt"
	"{{.ServiceName}}/internal/user/services"
	"{{.ServiceName}}/internal/auth/dto"
)

type {{.IAppName}}Service interface {
	Register(ctx context.Context, req *dto.RegisterRequest) (interface{}, error)
	Login(ctx context.Context, req *dto.LoginRequest) (interface{}, error)
	RefreshToken(ctx context.Context, req *dto.RefreshTokenRequest) (interface{}, error)
}

type {{.AppName}}Service struct {
	log logger.Logger 
	jwt jwt.JWT
	userSrv services.UserService
}

func New{{.IAppName}}Service(log logger.Logger, jwt jwt.JWT, userSrv services.UserService) *{{.AppName}}Service {
	return &{{.AppName}}Service{
		log: log,
		jwt: jwt,
		userSrv: userSrv,
	}
}

func (s *{{.AppName}}Service) Register(ctx context.Context, req *dto.RegisterRequest) (interface{}, error){
	return nil, nil
}


func (s *{{.AppName}}Service) Login(ctx context.Context, req *dto.LoginRequest) (interface{}, error){
	return nil, nil
}

func (s *authService) RefreshToken(ctx context.Context, req *dto.LoginRequest) (interface{}, error) {
	return nil, nil
}

{{end}}
