{{define "auth_service"}}
package services

import (
	"context"
	"common/pkg/logger"
	"common/pkg/jwt"
	"{{.ServiceName}}/internal/user/services"
	"{{.ServiceName}}/internal/auth/dto"
	"{{.ServiceName}}/internal/user/models"
	"github.com/google/uuid"
)

type {{.IAppName}}Service interface {
	Register(ctx context.Context, req *dto.RegisterRequest) (interface{}, error)
	Login(ctx context.Context, req *dto.LoginRequest) (interface{}, error)
	RefreshToken(ctx context.Context, req *dto.RefreshTokenRequest) (interface{}, error)
}

type {{.AppName}}Service struct {
	log logger.Logger 
	jwt jwt.JWT
	userSrv services.UserService
}

func New{{.IAppName}}Service(log logger.Logger, jwt jwt.JWT, userSrv services.UserService) *{{.AppName}}Service {
	return &{{.AppName}}Service{
		log: log,
		jwt: jwt,
		userSrv: userSrv,
	}
}

func (s *{{.AppName}}Service) Register(ctx context.Context, req *dto.RegisterRequest) (interface{}, error){
	user := &models.User{
		ID:        uuid.New(),
		FirstName: req.FirstName,
		MiddleName: req.MiddleName,
		LastName:  req.LastName,
		Email:     req.Email,
		Password:  req.Password,
	}
	newUser, err := s.userSrv.Create(user)
	if err != nil {
		return nil, err
	}

	token, err := s.jwt.GenerateToken(map[string]interface{}{
		"user_id": newUser.ID.String(),
	})
	if err != nil {
		return nil, err
	}

	resp := &dto.RegisterResponse{
		UserID: newUser.ID.String(),
		FirstName: newUser.FirstName,
		MiddleName: newUser.MiddleName,
		LastName:  newUser.LastName,
		Email:     newUser.Email,
		Token: dto.Token{
			AccessToken: token,
		},
	}
	return resp, nil
}


func (s *{{.AppName}}Service) Login(ctx context.Context, req *dto.LoginRequest) (interface{}, error){
	user, err := s.userSrv.GetByEmail(req.Email)
	if err != nil {
		return nil, err
	}

	token, err := s.jwt.GenerateToken(map[string]interface{}{
		"user_id": user.ID,
	})
	if err != nil {
		return nil, err
	}

	resp := &dto.LoginResponse{
		UserID: user.ID,
		Email:  user.Email,
		Token: dto.Token{
			AccessToken: token,
		},
	}
	return resp, nil
}

func (s *authService) RefreshToken(ctx context.Context, req *dto.RefreshTokenRequest) (interface{}, error) {
	return nil, nil
}

{{end}}
