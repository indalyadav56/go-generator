{{define "main"}}

package main

import (
	"fmt"
	"{{.ServiceName}}/config"
	"{{.ServiceName}}/database"
	"{{.ServiceName}}/pkg/logger"
    "{{.ServiceName}}/middlewares"

	userRepository "{{.ServiceName}}/internal/user/repository"
	
	authServices "{{.ServiceName}}/internal/auth/services"
	userServices "{{.ServiceName}}/internal/user/services"

	authControllers "{{.ServiceName}}/internal/auth/controllers"
	userControllers "{{.ServiceName}}/internal/user/controllers"

	authRoutes "{{.ServiceName}}/internal/auth/routes"
	userRoutes "{{.ServiceName}}/internal/user/routes"

    "github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/compress"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/healthcheck"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/gofiber/swagger"
)


// https://medium.com/@i.4erkasov/go-echo-framework-ddd-cqrs-part-1-637595917b3b

// @title           MeetSpace API
// @version         1.0
// @description     MeetSpace API documentation.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080

// @externalDocs.description  OpenAPI
// @externalDocs.url          https://swagger.io/resources/open-api/
//
//	@securityDefinitions.apikey	Bearer
//	@in							header
//	@name						Authorization
//	@description				Type "Bearer" followed by a space and JWT 
func main() {
	cfg, err := config.LoadConfig(".env")
	if err != nil {
		fmt.Println("Error creating logger:", err)
		return
	}

    logger, err := logger.New()
	if err != nil {
		fmt.Println("Error creating logger:", err)
		return
	}

	db, err := database.Init(database.Config{
		Host:     cfg.DBHost,
		Port:     cfg.DBPort,
		User:     cfg.DBUser,
		Password: cfg.DBPassword,
		Name:     cfg.DBName,
	})
	if err != nil {
		fmt.Println("Error creating logger:", err)
		return
	}

	app := fiber.New()

    app.Use(requestid.New())
	app.Use(cors.New())
	app.Use(middlewares.LoggerMiddleware(logger))
	app.Use(compress.New())
	app.Use(healthcheck.New())

	// repository
	userRepo := userRepository.NewUserRepository(db)

	// services
	authSrv := authServices.NewAuthService()
	userSrv := userServices.NewUserService(userRepo)

	// controllers
	authCtrl := authControllers.NewAuthController(authSrv)
	userCtrl := userControllers.NewUserController(userSrv)

	// routes
	authRoutes.AuthRoutes(app, authCtrl)
	userRoutes.UserRoutes(app, userCtrl)


	app.Get("/swagger/*", swagger.HandlerDefault)

    if err := app.Listen(":8080"); err != nil {
		logger.Fatal("Error starting server: %v", err)
	}
}

{{end}}
